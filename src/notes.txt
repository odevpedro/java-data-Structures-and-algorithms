O big O é uma forma de comparar dois conjuntos de código
Uma forma de implementações de código de forma matemática a fim de aferir a eficiênca com que esses códigos são reproduzidos.

Imagine que você tem dois códigos que fazem exatamente a mesma coisa, mas com implementações diferentes:

code 1 -
code 2 -

Qual dos dois código pode ser considerado melhor em termos de eficiência? Que critérios usar?



Time complexity -> capacidade de mensurar, através do numero de operaçẽos, a eficiência de um código. Mas não no tempo porque se executarmos esse mesmo código
Esse critério não leva em consideração o tempo, mas sim a quantidade de operações

outro aspecto que deve ser considerado é a space complexity
aquele código que roda mais rapido pode ocupar mais espaço em memória, então não seria o melhor.


Imagine que queremos iterar, através de um loop, em cima do array abaixo:
[1,2,3,4,5,6,7]

Se procurarmos pelo numero 1 a execução do nosso código será mais rapida, agora se procuramos
o numero 7 nosso código não executará tão rapido já que teriamos que passar por todos os outros numeros.


Notações BIG O

O(n)
A notação é usada para descrever algoritmos cujo tempo de execução aumenta linearmente em relação ao tamanho
da entrada
